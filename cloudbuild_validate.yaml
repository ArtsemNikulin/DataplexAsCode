steps:
#  - id: 'Build image'
#    name: 'gcr.io/cloud-builders/docker'
#    args: ['build', '-t', 'gcr.io/$PROJECT_ID/my-python-app', '.']
#
#  - id: 'Validation'
#    name: 'gcr.io/$PROJECT_ID/my-python-app'
#    env:
#      - 'BRANCH_NAME=$BRANCH_NAME'
#      - 'BASE_BRANCH=$_BASE_BRANCH'
#      - 'PR=$_PR_NUMBER'
#    args:
#      - '-c'
#      - |
#        from deploy_module.deploy import DataScanManager
#        import os
#        branch_name = os.getenv('BRANCH_NAME')
#        base_branch = os.getenv('BASE_BRANCH')
#        pr = os.getenv('PR')
#        print("*********************************************")
#        print(f"Validation of PR #{pr}: {branch_name} TO {base_branch}")
#        print("*********************************************")
#        manager = DataScanManager(env=base_branch)
#        manager.create_data_scans(validate=True)
  - name: 'alpine/git'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        # Fetch the latest commit
        git fetch origin $BRANCH_NAME
        
        # Get the list of changed files in the last commit
        CHANGED_FILES=$(git diff --name-only HEAD HEAD~1)
        
        # Print the changed files
        echo "Changed files: $CHANGED_FILES"
        
        # Initialize flags
        RULES_CHANGED=false
        OTHER_CHANGES=false

        # Check for changes in rules.yaml files and other file types
        for file in $CHANGED_FILES; do
          if [[ $file == *"rules.yaml" ]]; then
            RULES_CHANGED=true
            echo "Changed rules.yaml file: $file"
          elif [[ $file != *".yaml" ]]; then
            OTHER_CHANGES=true
          fi
        done
        
        # Determine the final output
        if [ "$OTHER_CHANGES" = true ] && [ "$RULES_CHANGED" = false ]; then
          echo "No rules were changed."
        fi
        
        # Optionally, you can save the results to a file or pass them to subsequent steps
        echo "RULES_CHANGED=$RULES_CHANGED" >> $WORKSPACE/results.env
        echo "OTHER_CHANGES=$OTHER_CHANGES" >> $WORKSPACE/results.env

  - name: 'gcr.io/cloud-builders/echo'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        # Print the environment variables set in the previous step
        source $WORKSPACE/results.env
        echo "Rules changed: $RULES_CHANGED"
        echo "Other changes: $OTHER_CHANGES"
               

options:
  logging: CLOUD_LOGGING_ONLY
  defaultLogsBucketBehavior: REGIONAL_USER_OWNED_BUCKET

serviceAccount: 'dataplex-vcs@dataplex-dev-437306.iam.gserviceaccount.com'
